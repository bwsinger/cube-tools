package commands

import (
	"fmt"
	"os"
	"os/exec"
	"strings"

	"github.com/caseydavenport/cube-tools/pkg/flag"
	"github.com/sirupsen/logrus"
	"github.com/spf13/cobra"
)

// Define a cobra command for parsing a single deck file.
var ParseDirectoryCmd = &cobra.Command{
	Use:   "parse-dir",
	Short: "Parse a directory of deck files",
	Run: func(cmd *cobra.Command, args []string) {
		// Verify input.
		if date == "" {
			logrus.Fatal("Must specify a date for the deck.")
		}

		parseDeckDir(deckDir, fileType, date)
	},
}

func init() {
	// Add flags for the command to parse a single deck.
	flags := ParseDirectoryCmd.Flags()
	flag.StringVarP(flags, &date, "date", "t", "DATE", "", "Date, in YYYY-MM-DD format")
	flag.StringVarP(flags, &deckDir, "deck-dir", "d", "DIR", "", "Directory containing deck files to parse.")
	flag.StringVarP(flags, &fileType, "filetype", "f", "TYPE", ".csv", "File type to look for in the deck-dir.")
}

// work represents a piece of parsing work to be done.
type work struct {
	player string
	path   string
}

func parseDeckDir(deckDir, fileType, date string) {
	// Make sure the output directory exists.
	outdir := fmt.Sprintf("drafts/%s", date)
	err := os.MkdirAll(outdir, os.ModePerm)
	if err != nil {
		panic(err)
	}

	// Gather files to load.
	files := []work{}

	// Load files from CSV dir.
	fileNames, err := os.ReadDir(deckDir)
	if err != nil {
		panic(err)
	}
	for _, f := range fileNames {
		// Skip some well-known files that we never want to process.
		if strings.Contains(f.Name(), "cubecobra.txt") {
			// These are generated by this tool and should just be skipped.
			continue
		}
		if strings.HasSuffix(f.Name(), fileType) {
			// Add the file, using the file name as the player name (minus the filetype)
			files = append(files, work{
				player: strings.Split(f.Name(), ".")[0],
				path:   fmt.Sprintf("%s/%s", deckDir, f.Name()),
			})
		}
	}

	if len(files) == 0 {
		logrus.WithField("filetype", fileType).Info("No file to process.")
		return
	} else {
		logrus.Infof("Processing files: %s", files)
	}

	// Determine if we need to auto-name the file.
	for _, f := range files {
		parseSingleDeck(f.path, f.player, labels, date)
	}

	snaptshotFilename := fmt.Sprintf("%s/cube-snapshot.json", outdir)
	if _, err := os.Stat(snaptshotFilename); err != nil {
		// Write the cube-snapshot file to the draft directory if it doesn't exist already.
		//
		// This ensures we have a snapshot of the cube as it was on this date
		// for historical tracking and comparisons.
		// TODO: This is a bit of a hack, and assumes this command is being run
		// within the root of this project. That's OK for now since I am the only user.
		cmd := exec.Command("cp", "cube.json", snaptshotFilename)
		if err := cmd.Run(); err != nil {
			panic(err)
		}
	}
}
